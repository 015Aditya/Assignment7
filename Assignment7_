{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "30b6722d-1510-4f65-8f10-65df557685c9",
   "metadata": {},
   "source": [
    "Question1 -> What is Abstraction in OOps? Explain with an example.\n",
    "\n",
    "Solution -> Abstraction in python is defined as hiding the implementation of logic from the client and using a particular application. And               the most important key feature of Object-Oriented Programming. It hides the irrelevant data specified in the project, reducing               complexity and giving value to efficiency. Abstraction is made in Python using Abstract classes and their methods in the code.\n",
    "           \n",
    "Abstraction is used to hide the internal functionality of the function from the users. The users only interact with the basic               implementation of the function, but inner working is hidden. User is familiar with that \"what function does\" but they don't know             \"how it does.\"\n",
    "\n",
    "In simple words, we all use the smartphone and very much familiar with its functions such as camera, voice-recorder, call-dialing, etc., but we don't know how these operations are happening in the background. Let's take another example - When we use the TV remote to increase the volume. We don't know how pressing a key increases the volume of the TV. We only know to press the \"+\" button to increase the volume.\n",
    "\n",
    "That is exactly the abstraction that works in the object-oriented concept.\n",
    "\n",
    "Syntax ->\n",
    "          from abc import ABC  \n",
    "          class ClassName(ABC):  \n",
    "          \n",
    "Example -> \n",
    "from abc import ABC, abstractmethod\n",
    "class Bank(ABC):\n",
    "    def branch(self, RD):\n",
    "        print(\"Fees submitted : \",RD)\n",
    "        def Bank(RD):\n",
    "            pass\n",
    "class private(Bank):\n",
    "    def Bank(RD):\n",
    "        print(\"Total RD Value here: \",RD)\n",
    "class XXX(Bank):\n",
    "    def Bank(RD):\n",
    "        print(\"Total RD Value here:\",RD)\n",
    "private.Bank(500)\n",
    "XXX.Bank(200)\n",
    "\n",
    "\n",
    "Question2 -> Differentiate between Abstraction and Encapsulation. Explain with an example.\n",
    "\n",
    "Solution -> Encapsulation hides variables or some implementation that may be changed so often in a class to prevent outsiders access it                 directly. They must access it via getter and setter methods.Wrapping code and data together into a single unit. Class is an example of encapsulation, because it wraps the method and property.\n",
    "\n",
    "Abstraction is used to hide something too, but in a higher degree (class, interface). Clients who use an abstract class (or interface) do not care about what it was, they just need to know what it can do.Hiding internal details and showing functionality only. Abstraction focus on what the object does instead of how it does. It provides generalized view of classes.\n",
    "\n",
    "Example ->\n",
    "class Person:\n",
    "    def __init__(self):\n",
    "        self.name = \"Jack Matte\"\n",
    "    def bio(self):\n",
    "        self.addr = \"Bakers street, London\"\n",
    "        self.taxInfo = \"HUAPK29971\"\n",
    "        self.contact = \"7484579294\"\n",
    "        print(self.addr, self.taxInfo, self.contact)\n",
    "    def interest(self):\n",
    "        self.favFood = \"Chinese\"\n",
    "        self.hobbies = \"Python Programming\"\n",
    "        self.bloodGroup = \"B+\"\n",
    "        print(self.favFood, self.hobbies, self.bloodGroup)\n",
    "\n",
    "obj = Person()\n",
    "print(obj.name)\n",
    "obj.bio()\n",
    "obj.interest()\n",
    "\n",
    "\n",
    "Question3 -> What is abc module in python? Why is it used?\n",
    "\n",
    "Solution -> The main goal of the abstract base class is to provide a standardized way to test whether an object adheres to a given                       specification. It can also prevent any attempt to instantiate a subclass that doesn’t override a particular method in the                   superclass. And finally, using an abstract class, a class can derive identity from another class without any object inheritance.\n",
    "\n",
    "Abstract base classes provide a way to define interfaces when other techniques like hasattr() would be clumsy or subtly wrong (for example with magic methods). ABCs introduce virtual subclasses, which are classes that don’t inherit from a class but are still recognized by isinstance() and issubclass() functions. There are many built-in ABCs in Python. ABCs for Data structures like Iterator, Generator, Set, mapping etc. are defined in collections.abc module. The numbers module defines numeric tower which is a collection of base classes for numeric data types. The 'abc' module in Python library provides the infrastructure for defining custom abstract base classes.\n",
    "\n",
    "\n",
    "Question4 -> How can we achieve data abstraction?\n",
    "\n",
    "Solution -> Abstraction is really powerful for making complex tasks and codes simpler when used in Object-Oriented Programming. It reduces the complexity for the user by making the relevant part accessible and usable leaving the unnecessary code hidden. Also, there are times when we do not want to give out sensitive parts of our code implementation and this is where data abstraction can also prove to be very functional.\n",
    "\n",
    "From a programmer’s perspective, if we think about data abstraction, there is more to it than just hiding unnecessary information. One other way to think of abstraction is as synonymous with generalization. If, for instance, you wanted to create a program to multiply eight times seven, you wouldn't build an application to only multiply those two numbers.\n",
    "\n",
    "Instead, you'd create a program capable of multiplying any two numbers. To put it another way, abstraction is a way of thinking about a function's specific use as separate from its more generalized purpose. Thinking this way lets you create flexible, scalable, and adaptable functions and programs. You’ll get a better understanding of data abstraction and it’s purposes by the end of this article."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
